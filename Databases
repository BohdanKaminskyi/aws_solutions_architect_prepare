Relational DBs on AWS (OLTP):
    - Microsoft SQL Server
    - Oracle
    - MySQL
    - PostgeSQL
    - Amazon Aurora
    - MariaDB

RDS (Relational DB Service)
    - Multi-AZ (for disaster recovery)
        . means, that if primary DB fails, aws starts to point to secondary db
    - Read Replicas - For Performance
        - whenever you do write to primary DB, that write is replicated to Read Replica
        - in case primary db fails, you need to manually repoint your instance to Replica
        - the point of replicas - if you have rly high READ load, some users will read from 1st db, and some from replica (scaling)
        - up to 5 copies


Non relational DBs:
    - Collection  == Table
    - Document    == Row
    - Key-value pairs == Columns
    - you can add new key-value pair even for just one record
    - DynamoDB


Data Warehousing (AWS Solution --- Redshift)
    - used for BI
    - tools like Cognos, Jaspersoft, SQL Server Reporting Services, Oracle Hyperion, SAP NetWeaver
    - used to pull in very large and complex datasets
    - usually used by management to do queries on data (such as current performance vs targets etc.)


OLTP vs OLAP
    - OLTP (Online Transaction Processing)
    - OLAP (Online Analytics Processing)
    - differs in terms of the types of queries you will run

    . OLTP example: Order number 2341214 pulls up a row of data such as Name, Date, Address to Deliver to etc.
    . OLAP example: as a manager, i want to know net profit in some territory for the Digital Radio Product (pulls a lot of records)


ElastiCache
    - web service that makes it easy to deploy, operate, and scale an in-memory cache in the cloud (for example, loading top 10 products page of 1M/sec requests website)
    - the service improves the performance of web applications by allowing you to retrieve information from fast,
      managed, in-memory caches instead of relying entirely on slower disk-based DBs
    - supports two open-source in-memory caching engines:
        . Redis
        . Memcached


Creating RDS instance (lab)
    - Amazon Aurora is set by default as engine
    - RDS runs on VMs
    - you do not have access to these VMs
    - patching RDS Operating System and DB is Amazon's responsibility
    - RDS is NOT Serverless (except Aurora)
    - db instance identifier (not the actual db name) - sacourse-rds-lab
    - db name - rds-lab-db
    - create EC2 instance 
            #!/bin/bash
            yum install httpd php php-mysql -y
            cd /var/www/html
            wget https://wordpress.org/wordpress-5.1.1.tar.gz
            tar -xzf wordpress-5.1.1.tar.gz
            cp -r wordpress/* /var/www/html/
            rm -rf wordpress
            rm -rf wordpress-5.1.1.tar.gz
            chmod -R 755 wp-content
            chown -R apache:apache wp-content
            service httpd start
            chkconfig httpd on
    1. the problem - RDS is on another security group that EC2 instance.
        - Solution: allow rds security group to be open to 'talk' to webserver
                . On RDS security group tap 'Edit' on Inbound rules
                . Add row 'MySQL/Aurora' and your webserver security group (as it's inbound it means: 'Allow my webserver to talk with this group)
                . db host == db endpoint
    
    
RDS Backups:
    - Automated Backups
        . you can recover your DB to any point in time within retention period (1 to 35 days)
        . automated backups will take a full daily snapshot and will also store transaction logs througout the day
        . when you do a recovery, AWS will first choose the most recent daily back up, and then apply transaction logs relevant to that day
        . allows you to do a point in time recovery down to a second
        . enabled by default
        . backup data is stored in s3 and you get free storage equal to db size
    - Database Snapshots
        . user-initiated
        . stored even after you delete the original RDS instance, unlike automated backups

    !!! if you do a restore from backup procedure - you will have new DNS endpoint

Encryption At Rest
    - supported for MySQL, Oracle, SQL Server, PostgreSQL, MariaDB & Aurora
    - encryption is done using the AWS Key Management Service (KMS) service
    - once your RDS instance is encrypted, data stored at rest/automated backups/read replicas and snapshots are encrypted


Multi-AZ
    - supported for SQL Server, Oracle, MySQL, PostgeSQL, MariaDB
    - allows you to have the exact copy of your db in another AZ
    - aws handles replication for you, when your db is written to, this write will be automatically synchronized to the stand by db


Read Replicas
    - allow you to have a read-only copy of your production database
    - this is achived by using Asynchronous replication from the primary RDS instance to the read replica
    - you use read replicas primarily for very read-heavy database workloads
    - used for scaling not for disaster recovery
    - automatic backups should be turned on in order to use read replicas
    - up to 5 read replica copies for any db
    - you can have read replicas of read replicas (watch out for latency)
    - you can have a read replica in a second region
    - each read replica has its own DNS end point
    - you can have replicas with Multi-AZ
    - can be promoted to a standalone db (will be no replica anymore though)


DynamoDB
    - NoSQL DB Solution
    - for all apps that need consistent, single-digit millisecond latency at any scale
    - supports document and key-value data models
    - stored on SSD storage
    - spread across 3 geographically distinct data centres
    - 2 read models:
        . Eventual Consistent Reads
            - consistency across all copies of data is usually reached within a second
            - repeating a read after a short time should return the updated data (Best Read Performance)
            > so if you do not need to read after you write within 1 sec -> it's your option
            > When you read data from a DynamoDB table, the response might not reflect the results of a recently completed write operation
        . Strongly Consistent Reads
            - eturns a response with the most up-to-date data, reflecting the updates from all prior write operations that were successful


Redshift
    - peta-byte scale data warehouse service in the cloud
    - starts with $0.25 per hour with no commitments
    - can be configured as follows:
        . Single Node (160 Gb)
        . Multi-Node
            - Leader-Node (manages client connections and receives queries)
            - Compute Node (store data and perform queries and computations). Up to 128 Compute Nodes
    - Massively Parallel Processing (MPP)
        . Redshift automatically distributes data and query load across all nodes
    - backups
        . enabled by default with 1 day retention period (max 35 days)
        . attempts to always maintain at least 3 copies of your data  (the original, replica and backup in Amazon S3)
    - encrypted at transit using SSL
    - encrypted at rest using AES-256
    - takes care of keys management
    - only in 1 AZ (cannot be Multi-AZ)


Aurora
    - up to 5x faster than MySQL
    - starts with 10GB, scales in 10GB increments to 64TB (Storage Autoscaling)
    - Compute resources can scale up to 32vCPUs and 244GB of memory
    - 2 copies of your data is contained in each availability zone, with minimum of 3 availability zones.
        6 copies of your data
    - extremely highly-available
    - 2 types of replicas:
        . Aurora Replicas (currently 15)
        . MySQL Read Replicas (currenty 5)
    - automated backups are always enabled on Aurora DB instances
    - you can take snapshots
    - migration from MySQL to Aurora:
        1. Actions -> 'Create Aurora read replica'
        2. Once created, you will have 'aurora-claster'
        3. tap on item with 'Writer' role
        4. Actions -> 'Promote read replica'

