VPCs 101
    - VPC (Virtual Private Cloud) 
    - think of it as Virtual Data Centre in the Cloud
    - let's you provision a logically isolated section of the AWS where you can launch resources
       in the virtual network you define
    - you have ocmplete control over your virtual environment including selection of IP ranges,
       creation of subnets and configuration of route tables and network gateways
    - 1 Subnet = 1 Availability Zone


VPC structure:
    - on the outside of VPC we have 2 gateways - Internet Gateway and Virtual Private Gateway
    - both of these connections go to a router
    - router then directs traffic to Route tables
    - then Route tables will direct traffic through Network ACLs (that's first line of defence), like firewall or security groups
    - Network ACLs are stateless (when Security Groups are statefull):
        . allow/deny rules can be added
        . you can block specific IP adresses
    - then we move to Security Groups which are statefull (futher line of defence)
    - and here we have 2 different subnets:
        . PUBLIC SN 
            - internet traffic is accessible for any EC2 instances here
        . PRIVATE SN
            - EC2 instance cannot connect to the internet on it's own
            - you can still connect to that EC2 instance, but that's only possible if you first ssh into instance 
               in public subnet, and from it ssh into private one
            - there are 3 ranges of IPs reserved for private subnets:
                . 10.0.0.0 - 10.255.255.255 (10/8 prefix)
                . 172.16.0.0 - 172.31.255.255 (172.16/12 prefix)
                . 192.168.0.0 - 192.168.255.255 (192.168/16 prefix)


What can we do with VPC:
    - launch instance into a subnet of your choosing
    - assign custom IP address ranges in each subnet
    - configure route tables between subnets
    - create internet gateway and attach it to our VPC
    - much better security control over your AWS resources
    - you can assign security groups to individual instances
    - subnet network access control lists (ACLS)


Default VPC vs Custom VPC
    - Default VPC is user-friendly, allowing you to immediately deploy instances
    - all subnets in Default VPC have a route out to the internet
    - each EC2 instance has both a public and private IP address


VPC Peering
    - allows you to connect one VPC with another via a direct network route using private IP addresses
    - instances behave as if they were on the same private network
    - you can peer VPC's with other AWS accounts as well as with other VPCs in the same account
    - peering is in a star configuration: ie 1 central VPC peers with 4 others.
        NO TRANSITIVE PEERING!!!
    - you can peer between regions


Build a Custom VPC lab
    - aws reservs 5 ips for Network Address, VPC router, broadcast etc.
    - when you create a VPC, some things are NOT created:
        . new subnets
        . internet gateways
    - but some ARE created:
        . route table
        . network ACL 
        . Security group

    1. create 2 subnets:
            . we want one of them to be publicly accessible, so:
                - we need EC2 instance to launch in it with public IP address (Actions -> 'Modify auto-sign IP settings)
    2. add Internet Gateways so we can connect to our VPC
            . when you create IG it is 'detached' (fix: Actions -> 'attach')
            . you cannot attach another IG to same VPC (1 IG per VPC)
    3. configure Route tables
            . if you click on 'Routes' there are 2 routes (so that our subnets can talk to each other over ipv4 and ipv6)
            . we always want to make main route table PRIVATE and have separate route table for public subnet
                - let's create a route table (public to the internet):
                    1. simply create
                    2. 'Edit routes' -> 'Add route'
                    3. destination: 0.0.0.0/0, target: GW
                - any subnet associated with this route table will become public
                    1. 'Subnet associations' -> 'Edit ...'
                    2. check your 'public' subnet
    4. create 2 EC2 instances (1 for public subnet, 1 for private):
            Public:
                . in 'network' use your VPC
                . 'subnet' - public subnet
                . auto-assign ips
                . create new security group:
                    - + http 0.0.0.0/0
            Private:
                . in 'network' use your VPC
                . 'subnet' - private subnet
                . auto-assign ips (Disable)
                . use existing security group:
                    - default one
                . add tag... 
    5. In order to connect to a private ec2 instance you need to create another security group:
        - private instance has not public ip, but has private one.
        - by default, you cannot ssh from your public ec2 instance into private,
            because they are both in different security groups
        1. On new security group
            - allow ICMP traffic (so we can do ping)
            - ssh
            - http
            - dbs
        2. Change security group of private instance to newly created
        3. then you need to store keypair in your public instance and ssh into private one
            !!!ATTENTION!!! Do not do that this way, as if your public instance got hacked, hacker that can ssh into your private instance
            - there are other ways of doing it right


Network Address Translation (NAT)
    - we want our instances in private subnet to still download software and install updates
    - we don't wanna make instance to be public
    - there are NAT instances and NAT Gateways
    - NAT instance is a single EC2 instance
    - NAT Gateway - highly available Gateway
    - In order to create NAT instance:
        1. EC2
        2. Community AMIs (in search query type "nat")
        3. select any (or first one)
        4. launch it in public subnet
        5. use webDMZ security group
        6. 'Actions' -> Change Source/Destination checks (Disable)
        7. Create a route in root tables for main table
        8. add rule 0.0.0.0/0 , as a target use NAT_instance
        - the problem with such architecture - we have 1 small NAT machine, it can be easily overhelmed
        - it's single point of failure (if you terminate that instance then you cannot download anything on private instances)
    - To create and use NAT Gateway:
        1. NAT Gateways section
        2. Choose public instance
        3. Go to Route tables, edit main route table
        4. add rule 0.0.0.0/0 , as a target use nat-gateway


Exam tips:
    - NAT Instances:
        . when creating a NAT instance, Disable Source/Destination Check on the Instance
        . NAT instances must be in a public subnet
        . there must be a route out of the private subnet to the NAT instance, in order for this to work
        . the amount of traffic that NAT instances can support depends on the instance size.
            If you are bottlenecking, increase the instance size
        . you can create high availability using Autoscaling Groups, multiple subnets in different AZs,
            and a script to automate failover
        . NAT instances are behind security groups

    - NAT gateways
        . Redundant inside the AZ
        . Preferred by the enterprise
        . starts at 5Gbps and scales currently to 45Gbps
        . no need to patch
        . not associated with security groups
        . automatically assigned a public ip address
        . remember to update route tables
        . no need to disable Source/Destination checks
        . if you have resources in multiple AZs and they share one NAT gateway, in the event that the NAT gateway's AZ is down,
            resources in the other AZ lose internet access. 
          To create AZ-independent architecture, create a NAT gateway in each AZ and configure your routing to ensure that resources
            use the NAT gateway in the same AZ

